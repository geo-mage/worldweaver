{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MAGE Procgen Documention MAGE Procgen is a Blender add-on that takes geographical data and uses them to create a 3D scene, generates a flood and then produces annotated images from that scene. It currently only works on mainland France, but has a lot of parameters to customize the window, assets, and flood. Setup Usage","title":"Home"},{"location":"#mage-procgen-documention","text":"MAGE Procgen is a Blender add-on that takes geographical data and uses them to create a 3D scene, generates a flood and then produces annotated images from that scene. It currently only works on mainland France, but has a lot of parameters to customize the window, assets, and flood. Setup Usage","title":"MAGE Procgen Documention"},{"location":"assets/","text":"Assets Management The assets used for the different objects created in Blender are customizable. The software is packaged with base assets that can be used as templates. On each kind of object there are restriction on what the asset should contain, depending on how the object is modeled internally. Most assets are based on Blender's Geometry Nodes . Buildings There are 4 kinds of buildings (\"Normal\", Churches, Factories and Malls), but render-wise they are managed the same way: the footprint of the building is extracted from the datasets, raised to the correct altitude to fit the terrain, and a surface is generated in Blender. The asset we use is a geometry node based on Buildify and takes this surface and transforms it into a building Flood [TODO] The flood object consists of square cells linked together to create a surface, and then the asset we use is inspired from this tutorial to create the aspect of realistic water Forests The software creates the footprint of forests using the input data, a surface is craated from it, and then the asset samples random points on the surface and places a tree on it. Roads The software creates the footprint of roads using the input data, a surface is created from it, and then the asset applies a texture on it and ensures it is place just over the top of the terrain surface Water The software creates the footprint of water using the input data, a surface is created from it, and then the asset applies a texture on it. Cars Along road lanes, the software generates vectors that should indicate the orientation of the car. The asset aligns a car model along this vector","title":"Managing assets"},{"location":"assets/#assets-management","text":"The assets used for the different objects created in Blender are customizable. The software is packaged with base assets that can be used as templates. On each kind of object there are restriction on what the asset should contain, depending on how the object is modeled internally. Most assets are based on Blender's Geometry Nodes .","title":"Assets Management"},{"location":"assets/#buildings","text":"There are 4 kinds of buildings (\"Normal\", Churches, Factories and Malls), but render-wise they are managed the same way: the footprint of the building is extracted from the datasets, raised to the correct altitude to fit the terrain, and a surface is generated in Blender. The asset we use is a geometry node based on Buildify and takes this surface and transforms it into a building","title":"Buildings"},{"location":"assets/#flood","text":"[TODO] The flood object consists of square cells linked together to create a surface, and then the asset we use is inspired from this tutorial to create the aspect of realistic water","title":"Flood"},{"location":"assets/#forests","text":"The software creates the footprint of forests using the input data, a surface is craated from it, and then the asset samples random points on the surface and places a tree on it.","title":"Forests"},{"location":"assets/#roads","text":"The software creates the footprint of roads using the input data, a surface is created from it, and then the asset applies a texture on it and ensures it is place just over the top of the terrain surface","title":"Roads"},{"location":"assets/#water","text":"The software creates the footprint of water using the input data, a surface is created from it, and then the asset applies a texture on it.","title":"Water"},{"location":"assets/#cars","text":"Along road lanes, the software generates vectors that should indicate the orientation of the car. The asset aligns a car model along this vector","title":"Cars"},{"location":"conf/","text":"Configuration file generation The project contains command line helpers to generate and edit configuration files These helpers are located in the Utils.ConfigGen module Guidelines for configuration edition For performances reasons, keep the window at a reasonable size (above 10 km\u00b2 seems to be a bit big especially if there is flooding involved). The terrain size and resolution will weight heavily on the performances, but having a scene that is large and detailed enough is also important to get realistic results especially if you use flooding. If you modify assets, make sur they are not too polygon-heavy to avoid saturating Blender (especially for trees, because there can easily be a lot of them in a scene). Configuration file structure detail base_folder is the path to the folder containing all the data the application will use Render Window: window_type is used to determine how the window will be defined.If it is \"COORDS\", it will be from the x_min , x_max , y_min and y_max coordinates; if it is \"TOWN\", it will be from the shape of the town indentified by town_dpt and town_name ; and if it is \"FILE\", it will be from the bounds of the objects described in the shapefile at window_shapefile . window_x_min is the min X of the render window. Only used if window type is \"COORDS\". window_y_min is the min Y of the render window. Only used if window type is \"COORDS\". window_x_max is the max X of the render window. Only used if window type is \"COORDS\". window_y_max is the max Y of the render window. Only used if window type is \"COORDS\". window_from_crs is the CRS code the xmin, xmax, ymin and ymax are given. Only used if window type is \"COORDS\". town_dpt is the number of the departement in which the town is. Only used if window type is \"TOWN\". town_name is the name of the town that will determine the render window. Only used if window type is \"TOWN\". window_shapefile is the path of the file that will define the render window. The software will read the features described in the file, extract the bounds from them and create the render window from that. Only used if window type is \"FILE\". Render parameters: terrain_resolution is the spatial resolution of the terrain in the render. Ideally it should be the same as the terrain raster data resolution to get the best ratio of accuracy vs performance but it can be lowered for big scenes. use_sat_img is the flag that if True, the software will use BDORTHO images as texture for the terrain. If False, it will use a base texture. Flood parameters: flood is the flag that if True, will tell the software to generate a flood on the scene . For more precise info on how the flood is generated, go to Flooding Algorithm flood_height Only used if flood is True. Height of the flood in meters. flood_cell_size (float): Only used if flood is True. Spatial resolution of the flood Output parameters: export_img is the flag that if True, will tell the software to generate png files from aerial views the scene. If False, will show all the buildings, cars, trees etc in the whole render scene. use_camera_ortho is the flag that if True, will tell the software to use an orthographic camera for its renders. If False, will use a perspective camera. out_img_resolution is the resolution of the output images out_img_pixel_size is the size of a pixel, in m. Assets All assets are configured with the same setup: use_camera_ortho * geometry_node_file is the name of the Blender asset file for the object. It must be in the Assets folder. * geometry_node_name is the name of the geometry node setup for the object. For more info on how assets should be generated, go to Assets Management . * tagging_index is the index using which object will be tagged in the output semantic map. The objects that can be customized are: * \"Normal\" Buildings (buildings that do not have a special semantic tag in the BDTOPO) * Churches (buildings that are tagged with the \"Religieux\" tag in the BDTOPO) * Factories (buildings that are tagged \"Industriel\" in the BDTOPO) * Malls (buildings that are tagged with the \"Commercial et services\" tag in the BDTOPO) * Flood (the flood water) * Forests (areas that are tagged as forests in the BDTOPO) * Roads (roads surface deducted from BDTOPO info) * Water (surface of lakes, rivers, etc) * Cars (cars are put on semi-random locations along the roads) Module methods Module to create and edit configuration file for the application generate_config ( new_file_name , ** kwargs ) Generate a configuration file from another configuration and saves it as 'new_file_name' Parameters: new_file_name ( str ) \u2013 The name of the new configuration file kwargs \u2013 Parameters of the config that will be changed from the base configuration. All are optionnal. Accepted parameters are: File parameters: from_file ( str ) \u2013 The name of the base configuration from which the new configuration will be created. If ommited, it will be the default configuration provided with the software. base_folder ( str ) \u2013 The name of the base folder of the application, in which all data will be found Render window parameters: window_type ( str ) \u2013 Type of definition used for the window. Can be \"COORDS\", \"TOWN\" or \"FILE\" window_x_min ( float ) \u2013 Min X of the render window. Only used if window type is \"COORDS\" window_y_min ( float ) \u2013 Min Y of the render window. Only used if window type is \"COORDS\" window_x_max ( float ) \u2013 Max X of the render window. Only used if window type is \"COORDS\" window_y_max ( float ) \u2013 Max Y of the render window. Only used if window type is \"COORDS\" window_from_crs ( int ) \u2013 CRS code the xmin, xmax, ymin and ymax are given. Only used if window type is \"COORDS\" town_dpt ( int ) \u2013 Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name ( str ) \u2013 Name of the town that will determine the render window. Only used if window type is \"TOWN\" window_shapefile ( str ) \u2013 File name of the file that will define the render window. Only used if window type is \"FILE\" Render parameters: terrain_resolution ( float ) \u2013 Spatial resolution of the terrain in the render. use_sat_img ( bool ) \u2013 If True, will use BDORTHO images as texture for the terrain. If false, will use a base texture. Flood parameters: flood ( bool ) \u2013 If True, will generate a flood on the scene. flood_height ( float ) \u2013 Only used if flood is True. Height of the flood in meters flood_cell_size ( float ) \u2013 Only used if flood is True. Spatial resolution of the flood Output parameters: export_img ( bool ) \u2013 If True, will generate png files from the scene. If False, will show all the buildings, cars, trees etc in the whole render scene. use_camera_ortho ( bool ) \u2013 If True, will use orthographic camera for renders. If False, will use a perspective camera out_img_resolution ( int ) \u2013 Resolution of the output images out_img_pixel_size ( float ) \u2013 Size of a pixel, in m. Assets for Normal buildings: building_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for normal buildings building_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for normal buildings building_render_config_tagging_index ( int ) \u2013 Index using which normal buildings will be tagged in the semantic map Assets for Churches: church_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for churches church_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for churches church_render_config_tagging_index ( int ) \u2013 Index using which churches will be tagged in the semantic map Assets for Factories: factory_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for factories factory_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for factories factory_render_config_tagging_index ( int ) \u2013 Index using which factories will be tagged in the semantic map Assets for Malls: mall_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for malls mall_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for malls mall_render_config_tagging_index ( int ) \u2013 Index using which malls will be tagged in the semantic map Assets for Flood: flood_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for the flood flood_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for the flood flood_render_config_tagging_index ( int ) \u2013 Index using which the flood will be tagged in the semantic map Assets for Forests: forest_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for forests forest_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for forests forest_render_config_tagging_index ( int ) \u2013 Index using which forests will be tagged in the semantic map Assets for Roads: road_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for roads road_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for roads road_render_config_tagging_index ( int ) \u2013 Index using which roads will be tagged in the semantic map Assets for Water: water_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for water water_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for water water_render_config_tagging_index ( int ) \u2013 Index using which water will be tagged in the semantic map Assets for Cars: car_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for cars car_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for cars car_render_config_tagging_index ( int ) \u2013 Index using which cars will be tagged in the semantic map Source code in mage_procgen/Utils/ConfigGen.pydef generate_config ( new_file_name : str , ** kwargs ): \"\"\" Generate a configuration file from another configuration and saves it as 'new_file_name' Parameters: new_file_name: The name of the new configuration file kwargs: Parameters of the config that will be changed from the base configuration. All are optionnal. Accepted parameters are: Other parameters: File parameters: from_file (str): The name of the base configuration from which the new configuration will be created. If ommited, it will be the default configuration provided with the software. base_folder (str): The name of the base folder of the application, in which all data will be found Other parameters: Render window parameters: window_type (str): Type of definition used for the window. Can be \"COORDS\", \"TOWN\" or \"FILE\" window_x_min (float): Min X of the render window. Only used if window type is \"COORDS\" window_y_min (float): Min Y of the render window. Only used if window type is \"COORDS\" window_x_max (float): Max X of the render window. Only used if window type is \"COORDS\" window_y_max (float): Max Y of the render window. Only used if window type is \"COORDS\" window_from_crs (int): CRS code the xmin, xmax, ymin and ymax are given. Only used if window type is \"COORDS\" town_dpt (int): Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name (str): Name of the town that will determine the render window. Only used if window type is \"TOWN\" window_shapefile (str): File name of the file that will define the render window. Only used if window type is \"FILE\" Other parameters: Render parameters: terrain_resolution (float): Spatial resolution of the terrain in the render. use_sat_img (bool): If True, will use BDORTHO images as texture for the terrain. If false, will use a base texture. Other parameters: Flood parameters: flood (bool): If True, will generate a flood on the scene. flood_height (float): Only used if flood is True. Height of the flood in meters flood_cell_size (float): Only used if flood is True. Spatial resolution of the flood Other parameters: Output parameters: export_img (bool): If True, will generate png files from the scene. If False, will show all the buildings, cars, trees etc in the whole render scene. use_camera_ortho (bool): If True, will use orthographic camera for renders. If False, will use a perspective camera out_img_resolution (int): Resolution of the output images out_img_pixel_size (float): Size of a pixel, in m. Other parameters: Assets for Normal buildings: building_render_config_geometry_node_file (str): Name of the asset file for normal buildings building_render_config_geometry_node_name (str): Name of the geometry node setup for normal buildings building_render_config_tagging_index (int): Index using which normal buildings will be tagged in the semantic map Other parameters: Assets for Churches: church_render_config_geometry_node_file (str): Name of the asset file for churches church_render_config_geometry_node_name (str): Name of the geometry node setup for churches church_render_config_tagging_index (int): Index using which churches will be tagged in the semantic map Other parameters: Assets for Factories: factory_render_config_geometry_node_file (str): Name of the asset file for factories factory_render_config_geometry_node_name (str): Name of the geometry node setup for factories factory_render_config_tagging_index (int): Index using which factories will be tagged in the semantic map Other parameters: Assets for Malls: mall_render_config_geometry_node_file (str): Name of the asset file for malls mall_render_config_geometry_node_name (str): Name of the geometry node setup for malls mall_render_config_tagging_index (int): Index using which malls will be tagged in the semantic map Other parameters: Assets for Flood: flood_render_config_geometry_node_file (str): Name of the asset file for the flood flood_render_config_geometry_node_name (str): Name of the geometry node setup for the flood flood_render_config_tagging_index (int): Index using which the flood will be tagged in the semantic map Other parameters: Assets for Forests: forest_render_config_geometry_node_file (str): Name of the asset file for forests forest_render_config_geometry_node_name (str): Name of the geometry node setup for forests forest_render_config_tagging_index (int): Index using which forests will be tagged in the semantic map Other parameters: Assets for Roads: road_render_config_geometry_node_file (str): Name of the asset file for roads road_render_config_geometry_node_name (str): Name of the geometry node setup for roads road_render_config_tagging_index (int): Index using which roads will be tagged in the semantic map Other parameters: Assets for Water: water_render_config_geometry_node_file (str): Name of the asset file for water water_render_config_geometry_node_name (str): Name of the geometry node setup for water water_render_config_tagging_index (int): Index using which water will be tagged in the semantic map Other parameters: Assets for Cars: car_render_config_geometry_node_file (str): Name of the asset file for cars car_render_config_geometry_node_name (str): Name of the geometry node setup for cars car_render_config_tagging_index (int): Index using which cars will be tagged in the semantic map \"\"\" _location = os . path . realpath ( os . path . join ( os . getcwd (), os . path . dirname ( __file__ ))) default_config_filepath = os . path . realpath ( os . path . join ( _location , \"..\" , config_folder , default_config_file ) ) base_config_file = kwargs . get ( \"from_file\" , default_config_filepath ) base_config = ConfigLoader . load ( base_config_file ) new_config = dataclasses . replace ( base_config ) new_config . base_folder = kwargs . get ( \"base_folder\" , base_config . base_folder ) # Window new_config . window_type = kwargs . get ( \"window_type\" , base_config . window_type ) new_geo_window = GeoWindowConfig ( kwargs . get ( \"window_x_min\" , base_config . geo_window . x_min ), kwargs . get ( \"window_y_min\" , base_config . geo_window . y_min ), kwargs . get ( \"window_x_max\" , base_config . geo_window . x_max ), kwargs . get ( \"window_y_max\" , base_config . geo_window . y_max ), kwargs . get ( \"window_from_crs\" , base_config . geo_window . crs_from ), ) new_config . geo_window = new_geo_window new_config . town_dpt = kwargs . get ( \"town_dpt\" , base_config . town_dpt ) new_config . town_name = kwargs . get ( \"town_name\" , base_config . town_name ) new_config . window_shapefile = kwargs . get ( \"window_shapefile\" , base_config . window_shapefile ) # Render params new_config . terrain_resolution = kwargs . get ( \"terrain_resolution\" , base_config . terrain_resolution ) new_config . use_sat_img = kwargs . get ( \"use_sat_img\" , base_config . use_sat_img ) # Flood new_config . flood = kwargs . get ( \"flood\" , base_config . flood ) new_config . flood_height = kwargs . get ( \"flood_height\" , base_config . flood_height ) new_config . flood_cell_size = kwargs . get ( \"flood_cell_size\" , base_config . flood_cell_size ) # Output new_config . export_img = kwargs . get ( \"export_img\" , base_config . export_img ) new_config . use_camera_ortho = kwargs . get ( \"use_camera_ortho\" , base_config . use_camera_ortho ) new_config . out_img_resolution = kwargs . get ( \"out_img_resolution\" , base_config . out_img_resolution ) new_config . out_img_pixel_size = kwargs . get ( \"out_img_pixel_size\" , base_config . out_img_pixel_size ) ## Assets # Buildings new_config . building_render_config . geometry_node_file = kwargs . get ( \"building_render_config_geometry_node_file\" , base_config . building_render_config . geometry_node_file , ) new_config . building_render_config . geometry_node_name = kwargs . get ( \"building_render_config_geometry_node_name\" , base_config . building_render_config . geometry_node_name , ) new_config . building_render_config . tagging_index = kwargs . get ( \"building_render_config_tagging_index\" , base_config . building_render_config . tagging_index , ) # Churches new_config . church_render_config . geometry_node_file = kwargs . get ( \"church_render_config_geometry_node_file\" , base_config . church_render_config . geometry_node_file , ) new_config . church_render_config . geometry_node_name = kwargs . get ( \"church_render_config_geometry_node_name\" , base_config . church_render_config . geometry_node_name , ) new_config . church_render_config . tagging_index = kwargs . get ( \"church_render_config_tagging_index\" , base_config . church_render_config . tagging_index , ) # Factories new_config . factory_render_config . geometry_node_file = kwargs . get ( \"factory_render_config_geometry_node_file\" , base_config . factory_render_config . geometry_node_file , ) new_config . factory_render_config . geometry_node_name = kwargs . get ( \"factory_render_config_geometry_node_name\" , base_config . factory_render_config . geometry_node_name , ) new_config . factory_render_config . tagging_index = kwargs . get ( \"factory_render_config_tagging_index\" , base_config . factory_render_config . tagging_index , ) # Malls new_config . mall_render_config . geometry_node_file = kwargs . get ( \"mall_render_config_geometry_node_file\" , base_config . mall_render_config . geometry_node_file , ) new_config . mall_render_config . geometry_node_name = kwargs . get ( \"mall_render_config_geometry_node_name\" , base_config . mall_render_config . geometry_node_name , ) new_config . mall_render_config . tagging_index = kwargs . get ( \"mall_render_config_tagging_index\" , base_config . mall_render_config . tagging_index , ) # Flood new_config . flood_render_config . geometry_node_file = kwargs . get ( \"flood_render_config_geometry_node_file\" , base_config . flood_render_config . geometry_node_file , ) new_config . flood_render_config . geometry_node_name = kwargs . get ( \"flood_render_config_geometry_node_name\" , base_config . flood_render_config . geometry_node_name , ) new_config . flood_render_config . tagging_index = kwargs . get ( \"flood_render_config_tagging_index\" , base_config . flood_render_config . tagging_index , ) # Forests new_config . forest_render_config . geometry_node_file = kwargs . get ( \"forest_render_config_geometry_node_file\" , base_config . forest_render_config . geometry_node_file , ) new_config . forest_render_config . geometry_node_name = kwargs . get ( \"forest_render_config_geometry_node_name\" , base_config . forest_render_config . geometry_node_name , ) new_config . forest_render_config . tagging_index = kwargs . get ( \"forest_render_config_tagging_index\" , base_config . forest_render_config . tagging_index , ) # Road new_config . road_render_config . geometry_node_file = kwargs . get ( \"road_render_config_geometry_node_file\" , base_config . road_render_config . geometry_node_file , ) new_config . road_render_config . geometry_node_name = kwargs . get ( \"road_render_config_geometry_node_name\" , base_config . road_render_config . geometry_node_name , ) new_config . road_render_config . tagging_index = kwargs . get ( \"road_render_config_tagging_index\" , base_config . road_render_config . tagging_index , ) # Water new_config . water_render_config . geometry_node_file = kwargs . get ( \"water_render_config_geometry_node_file\" , base_config . water_render_config . geometry_node_file , ) new_config . water_render_config . geometry_node_name = kwargs . get ( \"water_render_config_geometry_node_name\" , base_config . water_render_config . geometry_node_name , ) new_config . water_render_config . tagging_index = kwargs . get ( \"water_render_config_tagging_index\" , base_config . water_render_config . tagging_index , ) # Flood new_config . car_render_config . geometry_node_file = kwargs . get ( \"car_render_config_geometry_node_file\" , base_config . car_render_config . geometry_node_file , ) new_config . car_render_config . geometry_node_name = kwargs . get ( \"car_render_config_geometry_node_name\" , base_config . car_render_config . geometry_node_name , ) new_config . car_render_config . tagging_index = kwargs . get ( \"car_render_config_tagging_index\" , base_config . car_render_config . tagging_index , ) ConfigLoader . save ( new_config , new_file_name ) print ( \"New config file generated at \" , new_file_name ) set_geometry_node ( new_file_name , object_type , geometry_node_file , geometry_node_name , from_file = None ) Changes the geometry node asset file or geometry nodes setup name of an object type in a config file and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file object_type ( str ) \u2013 Type of object affected by the change. Can only be one of: \"BUILDING\", \"CHURCH\", \"FACTORY\", \"MALL\", \"FLOOD\", \"FOREST\", \"ROAD\", \"WATER\", \"CAR\" geometry_node_file ( str ) \u2013 Name of the blender asset file in which the geometrynodes setup is geometry_node_name ( str ) \u2013 Name of the geometrynodes setup from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.pydef set_geometry_node ( new_file_name : str , object_type : str , geometry_node_file : str , geometry_node_name : str , from_file : str = None , ): \"\"\" Changes the geometry node asset file or geometry nodes setup name of an object type in a config file and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file object_type: Type of object affected by the change. Can only be one of: \"BUILDING\", \"CHURCH\", \"FACTORY\", \"MALL\", \"FLOOD\", \"FOREST\", \"ROAD\", \"WATER\", \"CAR\" geometry_node_file: Name of the blender asset file in which the geometrynodes setup is geometry_node_name: Name of the geometrynodes setup from_file: Optional. Name of the base configuration. \"\"\" match object_type : case \"BUILDING\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , building_render_config_geometry_node_file = geometry_node_file , building_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , building_render_config_geometry_node_file = geometry_node_file , building_render_config_geometry_node_name = geometry_node_name , ) case \"CHURCH\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , church_render_config_geometry_node_file = geometry_node_file , church_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , church_render_config_geometry_node_file = geometry_node_file , church_render_config_geometry_node_name = geometry_node_name , ) case \"FACTORY\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , factory_render_config_geometry_node_file = geometry_node_file , factory_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , factory_render_config_geometry_node_file = geometry_node_file , factory_render_config_geometry_node_name = geometry_node_name , ) case \"MALL\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , mall_render_config_geometry_node_file = geometry_node_file , mall_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , mall_render_config_geometry_node_file = geometry_node_file , mall_render_config_geometry_node_name = geometry_node_name , ) case \"FLOOD\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , flood_render_config_geometry_node_file = geometry_node_file , flood_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , flood_config_geometry_node_file = geometry_node_file , flood_config_geometry_node_name = geometry_node_name , ) case \"FOREST\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , forest_render_config_geometry_node_file = geometry_node_file , forest_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , forest_render_config_geometry_node_file = geometry_node_file , forest_render_config_geometry_node_name = geometry_node_name , ) case \"ROAD\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , road_render_config_geometry_node_file = geometry_node_file , road_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , road_render_config_geometry_node_file = geometry_node_file , road_render_config_geometry_node_name = geometry_node_name , ) case \"WATER\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , water_render_config_geometry_node_file = geometry_node_file , water_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , water_render_config_geometry_node_file = geometry_node_file , water_render_config_geometry_node_name = geometry_node_name , ) case \"CAR\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , car_render_config_geometry_node_file = geometry_node_file , car_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , car_render_config_geometry_node_file = geometry_node_file , car_render_config_geometry_node_name = geometry_node_name , ) set_window_coords ( new_file_name , window_x_min , window_y_min , window_x_max , window_y_max , window_from_crs , from_file = None ) Changes the config to use coordinates to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file window_x_min ( float ) \u2013 Min X of the render window. window_y_min ( float ) \u2013 Min Y of the render window. window_x_max ( float ) \u2013 Max X of the render window. window_y_max ( float ) \u2013 ax Y of the render window. window_from_crs ( int ) \u2013 CRS code the xmin, xmax, ymin and ymax are given. from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 def set_window_coords ( new_file_name : str , window_x_min : float , window_y_min : float , window_x_max : float , window_y_max : float , window_from_crs : int , from_file : str = None , ): \"\"\" Changes the config to use coordinates to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file window_x_min: Min X of the render window. window_y_min: Min Y of the render window. window_x_max: Max X of the render window. window_y_max: ax Y of the render window. window_from_crs: CRS code the xmin, xmax, ymin and ymax are given. from_file: Optional. Name of the base configuration. \"\"\" if from_file is not None : generate_config ( new_file_name , from_file = from_file , window_type = \"COORDS\" , window_x_min = window_x_min , window_y_min = window_y_min , window_x_max = window_x_max , window_y_max = window_y_max , window_from_crs = window_from_crs , ) else : generate_config ( new_file_name , window_type = \"COORDS\" , window_x_min = window_x_min , window_y_min = window_y_min , window_x_max = window_x_max , window_y_max = window_y_max , window_from_crs = window_from_crs , ) set_window_file ( new_file_name , window_shapefile , from_file = None ) Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file window_shapefile ( str ) \u2013 File name of the file that will define the render window. from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.py 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 def set_window_file ( new_file_name : str , window_shapefile : str , from_file : str = None ): \"\"\" Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file window_shapefile: File name of the file that will define the render window. from_file: Optional. Name of the base configuration. \"\"\" if from_file is not None : generate_config ( new_file_name , from_file = from_file , window_type = \"FILE\" , window_shapefile = window_shapefile , ) else : generate_config ( new_file_name , window_type = \"FILE\" , window_shapefile = window_shapefile ) set_window_town ( new_file_name , town_dpt , town_name , from_file = None ) Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file town_dpt ( int ) \u2013 Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name ( str ) \u2013 Name of the town that will determine the render window. Only used if window type is \"TOWN\" from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 def set_window_town ( new_file_name : str , town_dpt : int , town_name : str , from_file : str = None ): \"\"\" Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file town_dpt: Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name: Name of the town that will determine the render window. Only used if window type is \"TOWN\" from_file: Optional. Name of the base configuration. \"\"\" if from_file is not None : generate_config ( new_file_name , from_file = from_file , window_type = \"TOWN\" , town_dpt = town_dpt , town_name = town_name , ) else : generate_config ( new_file_name , window_type = \"TOWN\" , town_dpt = town_dpt , town_name = town_name , )","title":"Configuration files"},{"location":"conf/#configuration-file-generation","text":"The project contains command line helpers to generate and edit configuration files These helpers are located in the Utils.ConfigGen module","title":"Configuration file generation"},{"location":"conf/#guidelines-for-configuration-edition","text":"For performances reasons, keep the window at a reasonable size (above 10 km\u00b2 seems to be a bit big especially if there is flooding involved). The terrain size and resolution will weight heavily on the performances, but having a scene that is large and detailed enough is also important to get realistic results especially if you use flooding. If you modify assets, make sur they are not too polygon-heavy to avoid saturating Blender (especially for trees, because there can easily be a lot of them in a scene).","title":"Guidelines for configuration edition"},{"location":"conf/#configuration-file-structure-detail","text":"base_folder is the path to the folder containing all the data the application will use","title":"Configuration file structure detail"},{"location":"conf/#render-window","text":"window_type is used to determine how the window will be defined.If it is \"COORDS\", it will be from the x_min , x_max , y_min and y_max coordinates; if it is \"TOWN\", it will be from the shape of the town indentified by town_dpt and town_name ; and if it is \"FILE\", it will be from the bounds of the objects described in the shapefile at window_shapefile . window_x_min is the min X of the render window. Only used if window type is \"COORDS\". window_y_min is the min Y of the render window. Only used if window type is \"COORDS\". window_x_max is the max X of the render window. Only used if window type is \"COORDS\". window_y_max is the max Y of the render window. Only used if window type is \"COORDS\". window_from_crs is the CRS code the xmin, xmax, ymin and ymax are given. Only used if window type is \"COORDS\". town_dpt is the number of the departement in which the town is. Only used if window type is \"TOWN\". town_name is the name of the town that will determine the render window. Only used if window type is \"TOWN\". window_shapefile is the path of the file that will define the render window. The software will read the features described in the file, extract the bounds from them and create the render window from that. Only used if window type is \"FILE\".","title":"Render Window:"},{"location":"conf/#render-parameters","text":"terrain_resolution is the spatial resolution of the terrain in the render. Ideally it should be the same as the terrain raster data resolution to get the best ratio of accuracy vs performance but it can be lowered for big scenes. use_sat_img is the flag that if True, the software will use BDORTHO images as texture for the terrain. If False, it will use a base texture.","title":"Render parameters:"},{"location":"conf/#flood-parameters","text":"flood is the flag that if True, will tell the software to generate a flood on the scene . For more precise info on how the flood is generated, go to Flooding Algorithm flood_height Only used if flood is True. Height of the flood in meters. flood_cell_size (float): Only used if flood is True. Spatial resolution of the flood","title":"Flood parameters:"},{"location":"conf/#output-parameters","text":"export_img is the flag that if True, will tell the software to generate png files from aerial views the scene. If False, will show all the buildings, cars, trees etc in the whole render scene. use_camera_ortho is the flag that if True, will tell the software to use an orthographic camera for its renders. If False, will use a perspective camera. out_img_resolution is the resolution of the output images out_img_pixel_size is the size of a pixel, in m.","title":"Output parameters:"},{"location":"conf/#assets","text":"All assets are configured with the same setup: use_camera_ortho * geometry_node_file is the name of the Blender asset file for the object. It must be in the Assets folder. * geometry_node_name is the name of the geometry node setup for the object. For more info on how assets should be generated, go to Assets Management . * tagging_index is the index using which object will be tagged in the output semantic map. The objects that can be customized are: * \"Normal\" Buildings (buildings that do not have a special semantic tag in the BDTOPO) * Churches (buildings that are tagged with the \"Religieux\" tag in the BDTOPO) * Factories (buildings that are tagged \"Industriel\" in the BDTOPO) * Malls (buildings that are tagged with the \"Commercial et services\" tag in the BDTOPO) * Flood (the flood water) * Forests (areas that are tagged as forests in the BDTOPO) * Roads (roads surface deducted from BDTOPO info) * Water (surface of lakes, rivers, etc) * Cars (cars are put on semi-random locations along the roads)","title":"Assets"},{"location":"conf/#module-methods","text":"Module to create and edit configuration file for the application","title":"Module methods"},{"location":"conf/#mage_procgen.Utils.ConfigGen.generate_config","text":"Generate a configuration file from another configuration and saves it as 'new_file_name' Parameters: new_file_name ( str ) \u2013 The name of the new configuration file kwargs \u2013 Parameters of the config that will be changed from the base configuration. All are optionnal. Accepted parameters are: File parameters: from_file ( str ) \u2013 The name of the base configuration from which the new configuration will be created. If ommited, it will be the default configuration provided with the software. base_folder ( str ) \u2013 The name of the base folder of the application, in which all data will be found Render window parameters: window_type ( str ) \u2013 Type of definition used for the window. Can be \"COORDS\", \"TOWN\" or \"FILE\" window_x_min ( float ) \u2013 Min X of the render window. Only used if window type is \"COORDS\" window_y_min ( float ) \u2013 Min Y of the render window. Only used if window type is \"COORDS\" window_x_max ( float ) \u2013 Max X of the render window. Only used if window type is \"COORDS\" window_y_max ( float ) \u2013 Max Y of the render window. Only used if window type is \"COORDS\" window_from_crs ( int ) \u2013 CRS code the xmin, xmax, ymin and ymax are given. Only used if window type is \"COORDS\" town_dpt ( int ) \u2013 Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name ( str ) \u2013 Name of the town that will determine the render window. Only used if window type is \"TOWN\" window_shapefile ( str ) \u2013 File name of the file that will define the render window. Only used if window type is \"FILE\" Render parameters: terrain_resolution ( float ) \u2013 Spatial resolution of the terrain in the render. use_sat_img ( bool ) \u2013 If True, will use BDORTHO images as texture for the terrain. If false, will use a base texture. Flood parameters: flood ( bool ) \u2013 If True, will generate a flood on the scene. flood_height ( float ) \u2013 Only used if flood is True. Height of the flood in meters flood_cell_size ( float ) \u2013 Only used if flood is True. Spatial resolution of the flood Output parameters: export_img ( bool ) \u2013 If True, will generate png files from the scene. If False, will show all the buildings, cars, trees etc in the whole render scene. use_camera_ortho ( bool ) \u2013 If True, will use orthographic camera for renders. If False, will use a perspective camera out_img_resolution ( int ) \u2013 Resolution of the output images out_img_pixel_size ( float ) \u2013 Size of a pixel, in m. Assets for Normal buildings: building_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for normal buildings building_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for normal buildings building_render_config_tagging_index ( int ) \u2013 Index using which normal buildings will be tagged in the semantic map Assets for Churches: church_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for churches church_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for churches church_render_config_tagging_index ( int ) \u2013 Index using which churches will be tagged in the semantic map Assets for Factories: factory_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for factories factory_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for factories factory_render_config_tagging_index ( int ) \u2013 Index using which factories will be tagged in the semantic map Assets for Malls: mall_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for malls mall_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for malls mall_render_config_tagging_index ( int ) \u2013 Index using which malls will be tagged in the semantic map Assets for Flood: flood_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for the flood flood_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for the flood flood_render_config_tagging_index ( int ) \u2013 Index using which the flood will be tagged in the semantic map Assets for Forests: forest_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for forests forest_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for forests forest_render_config_tagging_index ( int ) \u2013 Index using which forests will be tagged in the semantic map Assets for Roads: road_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for roads road_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for roads road_render_config_tagging_index ( int ) \u2013 Index using which roads will be tagged in the semantic map Assets for Water: water_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for water water_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for water water_render_config_tagging_index ( int ) \u2013 Index using which water will be tagged in the semantic map Assets for Cars: car_render_config_geometry_node_file ( str ) \u2013 Name of the asset file for cars car_render_config_geometry_node_name ( str ) \u2013 Name of the geometry node setup for cars car_render_config_tagging_index ( int ) \u2013 Index using which cars will be tagged in the semantic map Source code in mage_procgen/Utils/ConfigGen.pydef generate_config ( new_file_name : str , ** kwargs ): \"\"\" Generate a configuration file from another configuration and saves it as 'new_file_name' Parameters: new_file_name: The name of the new configuration file kwargs: Parameters of the config that will be changed from the base configuration. All are optionnal. Accepted parameters are: Other parameters: File parameters: from_file (str): The name of the base configuration from which the new configuration will be created. If ommited, it will be the default configuration provided with the software. base_folder (str): The name of the base folder of the application, in which all data will be found Other parameters: Render window parameters: window_type (str): Type of definition used for the window. Can be \"COORDS\", \"TOWN\" or \"FILE\" window_x_min (float): Min X of the render window. Only used if window type is \"COORDS\" window_y_min (float): Min Y of the render window. Only used if window type is \"COORDS\" window_x_max (float): Max X of the render window. Only used if window type is \"COORDS\" window_y_max (float): Max Y of the render window. Only used if window type is \"COORDS\" window_from_crs (int): CRS code the xmin, xmax, ymin and ymax are given. Only used if window type is \"COORDS\" town_dpt (int): Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name (str): Name of the town that will determine the render window. Only used if window type is \"TOWN\" window_shapefile (str): File name of the file that will define the render window. Only used if window type is \"FILE\" Other parameters: Render parameters: terrain_resolution (float): Spatial resolution of the terrain in the render. use_sat_img (bool): If True, will use BDORTHO images as texture for the terrain. If false, will use a base texture. Other parameters: Flood parameters: flood (bool): If True, will generate a flood on the scene. flood_height (float): Only used if flood is True. Height of the flood in meters flood_cell_size (float): Only used if flood is True. Spatial resolution of the flood Other parameters: Output parameters: export_img (bool): If True, will generate png files from the scene. If False, will show all the buildings, cars, trees etc in the whole render scene. use_camera_ortho (bool): If True, will use orthographic camera for renders. If False, will use a perspective camera out_img_resolution (int): Resolution of the output images out_img_pixel_size (float): Size of a pixel, in m. Other parameters: Assets for Normal buildings: building_render_config_geometry_node_file (str): Name of the asset file for normal buildings building_render_config_geometry_node_name (str): Name of the geometry node setup for normal buildings building_render_config_tagging_index (int): Index using which normal buildings will be tagged in the semantic map Other parameters: Assets for Churches: church_render_config_geometry_node_file (str): Name of the asset file for churches church_render_config_geometry_node_name (str): Name of the geometry node setup for churches church_render_config_tagging_index (int): Index using which churches will be tagged in the semantic map Other parameters: Assets for Factories: factory_render_config_geometry_node_file (str): Name of the asset file for factories factory_render_config_geometry_node_name (str): Name of the geometry node setup for factories factory_render_config_tagging_index (int): Index using which factories will be tagged in the semantic map Other parameters: Assets for Malls: mall_render_config_geometry_node_file (str): Name of the asset file for malls mall_render_config_geometry_node_name (str): Name of the geometry node setup for malls mall_render_config_tagging_index (int): Index using which malls will be tagged in the semantic map Other parameters: Assets for Flood: flood_render_config_geometry_node_file (str): Name of the asset file for the flood flood_render_config_geometry_node_name (str): Name of the geometry node setup for the flood flood_render_config_tagging_index (int): Index using which the flood will be tagged in the semantic map Other parameters: Assets for Forests: forest_render_config_geometry_node_file (str): Name of the asset file for forests forest_render_config_geometry_node_name (str): Name of the geometry node setup for forests forest_render_config_tagging_index (int): Index using which forests will be tagged in the semantic map Other parameters: Assets for Roads: road_render_config_geometry_node_file (str): Name of the asset file for roads road_render_config_geometry_node_name (str): Name of the geometry node setup for roads road_render_config_tagging_index (int): Index using which roads will be tagged in the semantic map Other parameters: Assets for Water: water_render_config_geometry_node_file (str): Name of the asset file for water water_render_config_geometry_node_name (str): Name of the geometry node setup for water water_render_config_tagging_index (int): Index using which water will be tagged in the semantic map Other parameters: Assets for Cars: car_render_config_geometry_node_file (str): Name of the asset file for cars car_render_config_geometry_node_name (str): Name of the geometry node setup for cars car_render_config_tagging_index (int): Index using which cars will be tagged in the semantic map \"\"\" _location = os . path . realpath ( os . path . join ( os . getcwd (), os . path . dirname ( __file__ ))) default_config_filepath = os . path . realpath ( os . path . join ( _location , \"..\" , config_folder , default_config_file ) ) base_config_file = kwargs . get ( \"from_file\" , default_config_filepath ) base_config = ConfigLoader . load ( base_config_file ) new_config = dataclasses . replace ( base_config ) new_config . base_folder = kwargs . get ( \"base_folder\" , base_config . base_folder ) # Window new_config . window_type = kwargs . get ( \"window_type\" , base_config . window_type ) new_geo_window = GeoWindowConfig ( kwargs . get ( \"window_x_min\" , base_config . geo_window . x_min ), kwargs . get ( \"window_y_min\" , base_config . geo_window . y_min ), kwargs . get ( \"window_x_max\" , base_config . geo_window . x_max ), kwargs . get ( \"window_y_max\" , base_config . geo_window . y_max ), kwargs . get ( \"window_from_crs\" , base_config . geo_window . crs_from ), ) new_config . geo_window = new_geo_window new_config . town_dpt = kwargs . get ( \"town_dpt\" , base_config . town_dpt ) new_config . town_name = kwargs . get ( \"town_name\" , base_config . town_name ) new_config . window_shapefile = kwargs . get ( \"window_shapefile\" , base_config . window_shapefile ) # Render params new_config . terrain_resolution = kwargs . get ( \"terrain_resolution\" , base_config . terrain_resolution ) new_config . use_sat_img = kwargs . get ( \"use_sat_img\" , base_config . use_sat_img ) # Flood new_config . flood = kwargs . get ( \"flood\" , base_config . flood ) new_config . flood_height = kwargs . get ( \"flood_height\" , base_config . flood_height ) new_config . flood_cell_size = kwargs . get ( \"flood_cell_size\" , base_config . flood_cell_size ) # Output new_config . export_img = kwargs . get ( \"export_img\" , base_config . export_img ) new_config . use_camera_ortho = kwargs . get ( \"use_camera_ortho\" , base_config . use_camera_ortho ) new_config . out_img_resolution = kwargs . get ( \"out_img_resolution\" , base_config . out_img_resolution ) new_config . out_img_pixel_size = kwargs . get ( \"out_img_pixel_size\" , base_config . out_img_pixel_size ) ## Assets # Buildings new_config . building_render_config . geometry_node_file = kwargs . get ( \"building_render_config_geometry_node_file\" , base_config . building_render_config . geometry_node_file , ) new_config . building_render_config . geometry_node_name = kwargs . get ( \"building_render_config_geometry_node_name\" , base_config . building_render_config . geometry_node_name , ) new_config . building_render_config . tagging_index = kwargs . get ( \"building_render_config_tagging_index\" , base_config . building_render_config . tagging_index , ) # Churches new_config . church_render_config . geometry_node_file = kwargs . get ( \"church_render_config_geometry_node_file\" , base_config . church_render_config . geometry_node_file , ) new_config . church_render_config . geometry_node_name = kwargs . get ( \"church_render_config_geometry_node_name\" , base_config . church_render_config . geometry_node_name , ) new_config . church_render_config . tagging_index = kwargs . get ( \"church_render_config_tagging_index\" , base_config . church_render_config . tagging_index , ) # Factories new_config . factory_render_config . geometry_node_file = kwargs . get ( \"factory_render_config_geometry_node_file\" , base_config . factory_render_config . geometry_node_file , ) new_config . factory_render_config . geometry_node_name = kwargs . get ( \"factory_render_config_geometry_node_name\" , base_config . factory_render_config . geometry_node_name , ) new_config . factory_render_config . tagging_index = kwargs . get ( \"factory_render_config_tagging_index\" , base_config . factory_render_config . tagging_index , ) # Malls new_config . mall_render_config . geometry_node_file = kwargs . get ( \"mall_render_config_geometry_node_file\" , base_config . mall_render_config . geometry_node_file , ) new_config . mall_render_config . geometry_node_name = kwargs . get ( \"mall_render_config_geometry_node_name\" , base_config . mall_render_config . geometry_node_name , ) new_config . mall_render_config . tagging_index = kwargs . get ( \"mall_render_config_tagging_index\" , base_config . mall_render_config . tagging_index , ) # Flood new_config . flood_render_config . geometry_node_file = kwargs . get ( \"flood_render_config_geometry_node_file\" , base_config . flood_render_config . geometry_node_file , ) new_config . flood_render_config . geometry_node_name = kwargs . get ( \"flood_render_config_geometry_node_name\" , base_config . flood_render_config . geometry_node_name , ) new_config . flood_render_config . tagging_index = kwargs . get ( \"flood_render_config_tagging_index\" , base_config . flood_render_config . tagging_index , ) # Forests new_config . forest_render_config . geometry_node_file = kwargs . get ( \"forest_render_config_geometry_node_file\" , base_config . forest_render_config . geometry_node_file , ) new_config . forest_render_config . geometry_node_name = kwargs . get ( \"forest_render_config_geometry_node_name\" , base_config . forest_render_config . geometry_node_name , ) new_config . forest_render_config . tagging_index = kwargs . get ( \"forest_render_config_tagging_index\" , base_config . forest_render_config . tagging_index , ) # Road new_config . road_render_config . geometry_node_file = kwargs . get ( \"road_render_config_geometry_node_file\" , base_config . road_render_config . geometry_node_file , ) new_config . road_render_config . geometry_node_name = kwargs . get ( \"road_render_config_geometry_node_name\" , base_config . road_render_config . geometry_node_name , ) new_config . road_render_config . tagging_index = kwargs . get ( \"road_render_config_tagging_index\" , base_config . road_render_config . tagging_index , ) # Water new_config . water_render_config . geometry_node_file = kwargs . get ( \"water_render_config_geometry_node_file\" , base_config . water_render_config . geometry_node_file , ) new_config . water_render_config . geometry_node_name = kwargs . get ( \"water_render_config_geometry_node_name\" , base_config . water_render_config . geometry_node_name , ) new_config . water_render_config . tagging_index = kwargs . get ( \"water_render_config_tagging_index\" , base_config . water_render_config . tagging_index , ) # Flood new_config . car_render_config . geometry_node_file = kwargs . get ( \"car_render_config_geometry_node_file\" , base_config . car_render_config . geometry_node_file , ) new_config . car_render_config . geometry_node_name = kwargs . get ( \"car_render_config_geometry_node_name\" , base_config . car_render_config . geometry_node_name , ) new_config . car_render_config . tagging_index = kwargs . get ( \"car_render_config_tagging_index\" , base_config . car_render_config . tagging_index , ) ConfigLoader . save ( new_config , new_file_name ) print ( \"New config file generated at \" , new_file_name )","title":"generate_config"},{"location":"conf/#mage_procgen.Utils.ConfigGen.set_geometry_node","text":"Changes the geometry node asset file or geometry nodes setup name of an object type in a config file and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file object_type ( str ) \u2013 Type of object affected by the change. Can only be one of: \"BUILDING\", \"CHURCH\", \"FACTORY\", \"MALL\", \"FLOOD\", \"FOREST\", \"ROAD\", \"WATER\", \"CAR\" geometry_node_file ( str ) \u2013 Name of the blender asset file in which the geometrynodes setup is geometry_node_name ( str ) \u2013 Name of the geometrynodes setup from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.pydef set_geometry_node ( new_file_name : str , object_type : str , geometry_node_file : str , geometry_node_name : str , from_file : str = None , ): \"\"\" Changes the geometry node asset file or geometry nodes setup name of an object type in a config file and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file object_type: Type of object affected by the change. Can only be one of: \"BUILDING\", \"CHURCH\", \"FACTORY\", \"MALL\", \"FLOOD\", \"FOREST\", \"ROAD\", \"WATER\", \"CAR\" geometry_node_file: Name of the blender asset file in which the geometrynodes setup is geometry_node_name: Name of the geometrynodes setup from_file: Optional. Name of the base configuration. \"\"\" match object_type : case \"BUILDING\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , building_render_config_geometry_node_file = geometry_node_file , building_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , building_render_config_geometry_node_file = geometry_node_file , building_render_config_geometry_node_name = geometry_node_name , ) case \"CHURCH\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , church_render_config_geometry_node_file = geometry_node_file , church_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , church_render_config_geometry_node_file = geometry_node_file , church_render_config_geometry_node_name = geometry_node_name , ) case \"FACTORY\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , factory_render_config_geometry_node_file = geometry_node_file , factory_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , factory_render_config_geometry_node_file = geometry_node_file , factory_render_config_geometry_node_name = geometry_node_name , ) case \"MALL\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , mall_render_config_geometry_node_file = geometry_node_file , mall_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , mall_render_config_geometry_node_file = geometry_node_file , mall_render_config_geometry_node_name = geometry_node_name , ) case \"FLOOD\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , flood_render_config_geometry_node_file = geometry_node_file , flood_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , flood_config_geometry_node_file = geometry_node_file , flood_config_geometry_node_name = geometry_node_name , ) case \"FOREST\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , forest_render_config_geometry_node_file = geometry_node_file , forest_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , forest_render_config_geometry_node_file = geometry_node_file , forest_render_config_geometry_node_name = geometry_node_name , ) case \"ROAD\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , road_render_config_geometry_node_file = geometry_node_file , road_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , road_render_config_geometry_node_file = geometry_node_file , road_render_config_geometry_node_name = geometry_node_name , ) case \"WATER\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , water_render_config_geometry_node_file = geometry_node_file , water_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , water_render_config_geometry_node_file = geometry_node_file , water_render_config_geometry_node_name = geometry_node_name , ) case \"CAR\" : if from_file is not None : generate_config ( new_file_name , from_file = from_file , car_render_config_geometry_node_file = geometry_node_file , car_render_config_geometry_node_name = geometry_node_name , ) else : generate_config ( new_file_name , car_render_config_geometry_node_file = geometry_node_file , car_render_config_geometry_node_name = geometry_node_name , )","title":"set_geometry_node"},{"location":"conf/#mage_procgen.Utils.ConfigGen.set_window_coords","text":"Changes the config to use coordinates to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file window_x_min ( float ) \u2013 Min X of the render window. window_y_min ( float ) \u2013 Min Y of the render window. window_x_max ( float ) \u2013 Max X of the render window. window_y_max ( float ) \u2013 ax Y of the render window. window_from_crs ( int ) \u2013 CRS code the xmin, xmax, ymin and ymax are given. from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 def set_window_coords ( new_file_name : str , window_x_min : float , window_y_min : float , window_x_max : float , window_y_max : float , window_from_crs : int , from_file : str = None , ): \"\"\" Changes the config to use coordinates to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file window_x_min: Min X of the render window. window_y_min: Min Y of the render window. window_x_max: Max X of the render window. window_y_max: ax Y of the render window. window_from_crs: CRS code the xmin, xmax, ymin and ymax are given. from_file: Optional. Name of the base configuration. \"\"\" if from_file is not None : generate_config ( new_file_name , from_file = from_file , window_type = \"COORDS\" , window_x_min = window_x_min , window_y_min = window_y_min , window_x_max = window_x_max , window_y_max = window_y_max , window_from_crs = window_from_crs , ) else : generate_config ( new_file_name , window_type = \"COORDS\" , window_x_min = window_x_min , window_y_min = window_y_min , window_x_max = window_x_max , window_y_max = window_y_max , window_from_crs = window_from_crs , )","title":"set_window_coords"},{"location":"conf/#mage_procgen.Utils.ConfigGen.set_window_file","text":"Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file window_shapefile ( str ) \u2013 File name of the file that will define the render window. from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.py 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 def set_window_file ( new_file_name : str , window_shapefile : str , from_file : str = None ): \"\"\" Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file window_shapefile: File name of the file that will define the render window. from_file: Optional. Name of the base configuration. \"\"\" if from_file is not None : generate_config ( new_file_name , from_file = from_file , window_type = \"FILE\" , window_shapefile = window_shapefile , ) else : generate_config ( new_file_name , window_type = \"FILE\" , window_shapefile = window_shapefile )","title":"set_window_file"},{"location":"conf/#mage_procgen.Utils.ConfigGen.set_window_town","text":"Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name ( str ) \u2013 Name of the new configuration file town_dpt ( int ) \u2013 Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name ( str ) \u2013 Name of the town that will determine the render window. Only used if window type is \"TOWN\" from_file ( str , default: None ) \u2013 Optional. Name of the base configuration. Source code in mage_procgen/Utils/ConfigGen.py 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 def set_window_town ( new_file_name : str , town_dpt : int , town_name : str , from_file : str = None ): \"\"\" Changes the config to use town shape to define the render window and saves it at 'new_file_name'. Base configuration will be the one in 'from_file' if provided, or the base configuration if not. Parameters: new_file_name: Name of the new configuration file town_dpt: Number of the departement in which the town is. Only used if window type is \"TOWN\" town_name: Name of the town that will determine the render window. Only used if window type is \"TOWN\" from_file: Optional. Name of the base configuration. \"\"\" if from_file is not None : generate_config ( new_file_name , from_file = from_file , window_type = \"TOWN\" , town_dpt = town_dpt , town_name = town_name , ) else : generate_config ( new_file_name , window_type = \"TOWN\" , town_dpt = town_dpt , town_name = town_name , )","title":"set_window_town"},{"location":"datafiles/","text":"The project contains command line helpers to extract data from IGN 7zip archives These helpers are located in the Utils.DataFiles module Warning This module needs 7zip to be installed in order to work setup_bdortho ( base_folder , departement , archive_file ) Extracts BDORTHO archive, and changes the folders to simplify it from: * BDORTHO * ORTHOHR_1-0_RVB-0M20_JP2-E080_LAMB93_D006_2020-01-01 * ORTHOHR * 1_DONNEES_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 * *.jp2 * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020/ * dalles.shp to: * BDORTHO * 1_DONNEES_LIVRAISON * OHR_RVB * *.jp2 * 3_SUPPLEMENTS_LIVRAISON * OHR_RVB * dalles.shp Parameters: base_folder ( str ) \u2013 base folder of the application (same one as the one written in the config file) departement ( str ) \u2013 number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file ( str ) \u2013 archive of the database (or the first file of the split archive) Source code in mage_procgen/Utils/DataFiles.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 def setup_bdortho ( base_folder : str , departement : str , archive_file : str ): \"\"\" Extracts BDORTHO archive, and changes the folders to simplify it from: * BDORTHO * ORTHOHR_1-0_RVB-0M20_JP2-E080_LAMB93_D006_2020-01-01 * ORTHOHR * 1_DONNEES_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 * *.jp2 * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020/ * dalles.shp to: * BDORTHO * 1_DONNEES_LIVRAISON * OHR_RVB * *.jp2 * 3_SUPPLEMENTS_LIVRAISON * OHR_RVB * dalles.shp Parameters: base_folder: base folder of the application (same one as the one written in the config file) departement: number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file: archive of the database (or the first file of the split archive) \"\"\" current_base_folder = os . path . join ( base_folder , departements , str ( departement ), texture_image_DB ) archive_name = os . path . basename ( archive_file ) . split ( \".\" )[ 0 ] out_file_option = \"-o\" + current_base_folder command_line = get_installed_7z () + \" x \" + archive_file + \" \" + out_file_option subprocess . run ([ command_line ], shell = True ) # ORTHOHR_1-0_RVB-0M20_JP2-E080_LAMB93_D006_2020-01-01 path1 = os . path . join ( current_base_folder , archive_name ) # ORTHOHR dir1 = os . listdir ( path1 )[ 0 ] path2 = os . path . join ( path1 , dir1 ) # 1_DONNEES_LIVRAISON_2021-04-00084 # os.listdir return order is not sorted. better match by substring dir2 = next ( x for x in os . listdir ( path2 ) if delivery in x ) path3 = os . path . join ( path2 , dir2 ) # OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 # Other file in the directory has the same name but it's the hashfile dir3 = next ( x for x in os . listdir ( path3 ) if hash_file_extenstion not in x ) path4 = os . path . join ( path3 , dir3 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , delivery ), exist_ok = True , ) os . rename ( path4 , os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , delivery , texture_data_folder , ), ) # 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 dir4 = next ( x for x in os . listdir ( path2 ) if additional in x ) path5 = os . path . join ( path2 , dir4 ) # OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 dir5 = next ( x for x in os . listdir ( path5 ) if hash_file_extenstion not in x ) path6 = os . path . join ( path5 , dir5 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , additional ), exist_ok = True , ) os . rename ( path6 , os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , additional , texture_data_folder , ), ) setup_bdtopo ( base_folder , departement , archive_file ) Extracts BDTOPO archive, and changes the folders to simplify it from: * BDTOPO * BDTOPO_3-3_TOUSTHEMES_SHP_LAMB93_D006_2023-06-15 * BDTOPO * 1_DONNEES_LIVRAISON_2021-04-00084 * BDT_3-3_SHP_LAMB93_D006-ED2023-06-15 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp to: * BDTOPO: * 1_DONNEES_LIVRAISON_2021-04-00084 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp Parameters: base_folder ( str ) \u2013 base folder of the application (same one as the one written in the config file) departement ( str ) \u2013 number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file ( str ) \u2013 archive of the database (or the first file of the split archive) Source code in mage_procgen/Utils/DataFiles.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def setup_bdtopo ( base_folder : str , departement : str , archive_file : str ): \"\"\" Extracts BDTOPO archive, and changes the folders to simplify it from: * BDTOPO * BDTOPO_3-3_TOUSTHEMES_SHP_LAMB93_D006_2023-06-15 * BDTOPO * 1_DONNEES_LIVRAISON_2021-04-00084 * BDT_3-3_SHP_LAMB93_D006-ED2023-06-15 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp to: * BDTOPO: * 1_DONNEES_LIVRAISON_2021-04-00084 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp Parameters: base_folder: base folder of the application (same one as the one written in the config file) departement: number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file: archive of the database (or the first file of the split archive) \"\"\" current_base_folder = os . path . join ( base_folder , departements , str ( departement ), bdtopo_folder ) archive_name = os . path . basename ( archive_file ) . split ( \".\" )[ 0 ] out_file_option = \"-o\" + current_base_folder command_line = get_installed_7z () + \" x \" + archive_file + \" \" + out_file_option subprocess . run ([ command_line ], shell = True ) # BDTOPO_3-3_TOUSTHEMES_SHP_LAMB93_D006_2023-06-15 path1 = os . path . join ( current_base_folder , archive_name ) # BDTOPO dir1 = os . listdir ( path1 )[ 0 ] path2 = os . path . join ( path1 , dir1 ) # 1_DONNEES_LIVRAISON_2021-04-00084 # os.listdir return order is not sorted. better match by substring dir2 = next ( x for x in os . listdir ( path2 ) if delivery in x ) path3 = os . path . join ( path2 , dir2 ) # BDT_3-3_SHP_LAMB93_D006-ED2023-06-15 # Other file in the directory has the same name but it's the hashfile dir3 = next ( x for x in os . listdir ( path3 ) if hash_file_extenstion not in x ) path4 = os . path . join ( path3 , dir3 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), bdtopo_folder ), exist_ok = True , ) os . rename ( path4 , os . path . join ( base_folder , departements , str ( departement ), bdtopo_folder , delivery ), ) setup_rgealti ( base_folder , departement , archive_file ) Extracts RGEALTI archive, and changes the folders to simplify it from: * RGEALTI * RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D077_2021-03-03 * RGEALTI * 1_DONNEES_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * *.asc * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * dalles.shp to: * RGEALTI * 1_DONNEES_LIVRAISON * MNT * *.asc * 3_SUPPLEMENTS_LIVRAISON * MNT * dalles.shp Parameters: base_folder ( str ) \u2013 base folder of the application (same one as the one written in the config file) departement ( str ) \u2013 number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file ( str ) \u2013 archive of the database (or the first file of the split archive) Source code in mage_procgen/Utils/DataFiles.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 def setup_rgealti ( base_folder : str , departement : str , archive_file : str ): \"\"\" Extracts RGEALTI archive, and changes the folders to simplify it from: * RGEALTI * RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D077_2021-03-03 * RGEALTI * 1_DONNEES_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * *.asc * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * dalles.shp to: * RGEALTI * 1_DONNEES_LIVRAISON * MNT * *.asc * 3_SUPPLEMENTS_LIVRAISON * MNT * dalles.shp Parameters: base_folder: base folder of the application (same one as the one written in the config file) departement: number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file: archive of the database (or the first file of the split archive) \"\"\" current_base_folder = os . path . join ( base_folder , departements , str ( departement ), terrain_DB ) archive_name = os . path . basename ( archive_file ) . split ( \".\" )[ 0 ] out_file_option = \"-o\" + current_base_folder command_line = get_installed_7z () + \" x \" + archive_file + \" \" + out_file_option subprocess . run ([ command_line ], shell = True ) # RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D077_2021-03-03 path1 = os . path . join ( current_base_folder , archive_name ) # RGEALTI dir1 = os . listdir ( path1 )[ 0 ] path2 = os . path . join ( path1 , dir1 ) # 1_DONNEES_LIVRAISON_2021-04-00084 # os.listdir return order is not sorted. better match by substring dir2 = next ( x for x in os . listdir ( path2 ) if delivery in x ) path3 = os . path . join ( path2 , dir2 ) # RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 # Folder contains 3 subfolders, and the corresponding hashfiles. dirs3 = [ x for x in os . listdir ( path3 ) if hash_file_extenstion not in x ] dir3 = next ( x for x in dirs3 if terrain_data_folder in x ) path4 = os . path . join ( path3 , dir3 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), terrain_DB , delivery ), exist_ok = True , ) os . rename ( path4 , os . path . join ( base_folder , departements , str ( departement ), terrain_DB , delivery , terrain_data_folder , ), ) # 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 dir4 = next ( x for x in os . listdir ( path2 ) if additional in x ) path5 = os . path . join ( path2 , dir4 ) # RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 dir5 = next ( x for x in os . listdir ( path5 ) if hash_file_extenstion not in x ) path6 = os . path . join ( path5 , dir5 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), terrain_DB , additional ), exist_ok = True , ) os . rename ( path6 , os . path . join ( base_folder , departements , str ( departement ), terrain_DB , additional , terrain_data_folder , ), )","title":"Managing IGN open data"},{"location":"datafiles/#mage_procgen.Utils.DataFiles.setup_bdortho","text":"Extracts BDORTHO archive, and changes the folders to simplify it from: * BDORTHO * ORTHOHR_1-0_RVB-0M20_JP2-E080_LAMB93_D006_2020-01-01 * ORTHOHR * 1_DONNEES_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 * *.jp2 * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020/ * dalles.shp to: * BDORTHO * 1_DONNEES_LIVRAISON * OHR_RVB * *.jp2 * 3_SUPPLEMENTS_LIVRAISON * OHR_RVB * dalles.shp Parameters: base_folder ( str ) \u2013 base folder of the application (same one as the one written in the config file) departement ( str ) \u2013 number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file ( str ) \u2013 archive of the database (or the first file of the split archive) Source code in mage_procgen/Utils/DataFiles.py 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 def setup_bdortho ( base_folder : str , departement : str , archive_file : str ): \"\"\" Extracts BDORTHO archive, and changes the folders to simplify it from: * BDORTHO * ORTHOHR_1-0_RVB-0M20_JP2-E080_LAMB93_D006_2020-01-01 * ORTHOHR * 1_DONNEES_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 * *.jp2 * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020/ * dalles.shp to: * BDORTHO * 1_DONNEES_LIVRAISON * OHR_RVB * *.jp2 * 3_SUPPLEMENTS_LIVRAISON * OHR_RVB * dalles.shp Parameters: base_folder: base folder of the application (same one as the one written in the config file) departement: number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file: archive of the database (or the first file of the split archive) \"\"\" current_base_folder = os . path . join ( base_folder , departements , str ( departement ), texture_image_DB ) archive_name = os . path . basename ( archive_file ) . split ( \".\" )[ 0 ] out_file_option = \"-o\" + current_base_folder command_line = get_installed_7z () + \" x \" + archive_file + \" \" + out_file_option subprocess . run ([ command_line ], shell = True ) # ORTHOHR_1-0_RVB-0M20_JP2-E080_LAMB93_D006_2020-01-01 path1 = os . path . join ( current_base_folder , archive_name ) # ORTHOHR dir1 = os . listdir ( path1 )[ 0 ] path2 = os . path . join ( path1 , dir1 ) # 1_DONNEES_LIVRAISON_2021-04-00084 # os.listdir return order is not sorted. better match by substring dir2 = next ( x for x in os . listdir ( path2 ) if delivery in x ) path3 = os . path . join ( path2 , dir2 ) # OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 # Other file in the directory has the same name but it's the hashfile dir3 = next ( x for x in os . listdir ( path3 ) if hash_file_extenstion not in x ) path4 = os . path . join ( path3 , dir3 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , delivery ), exist_ok = True , ) os . rename ( path4 , os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , delivery , texture_data_folder , ), ) # 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 dir4 = next ( x for x in os . listdir ( path2 ) if additional in x ) path5 = os . path . join ( path2 , dir4 ) # OHR_RVB_0M20_JP2-E080_LAMB93_D06-2020 dir5 = next ( x for x in os . listdir ( path5 ) if hash_file_extenstion not in x ) path6 = os . path . join ( path5 , dir5 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , additional ), exist_ok = True , ) os . rename ( path6 , os . path . join ( base_folder , departements , str ( departement ), texture_image_DB , additional , texture_data_folder , ), )","title":"setup_bdortho"},{"location":"datafiles/#mage_procgen.Utils.DataFiles.setup_bdtopo","text":"Extracts BDTOPO archive, and changes the folders to simplify it from: * BDTOPO * BDTOPO_3-3_TOUSTHEMES_SHP_LAMB93_D006_2023-06-15 * BDTOPO * 1_DONNEES_LIVRAISON_2021-04-00084 * BDT_3-3_SHP_LAMB93_D006-ED2023-06-15 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp to: * BDTOPO: * 1_DONNEES_LIVRAISON_2021-04-00084 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp Parameters: base_folder ( str ) \u2013 base folder of the application (same one as the one written in the config file) departement ( str ) \u2013 number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file ( str ) \u2013 archive of the database (or the first file of the split archive) Source code in mage_procgen/Utils/DataFiles.py 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def setup_bdtopo ( base_folder : str , departement : str , archive_file : str ): \"\"\" Extracts BDTOPO archive, and changes the folders to simplify it from: * BDTOPO * BDTOPO_3-3_TOUSTHEMES_SHP_LAMB93_D006_2023-06-15 * BDTOPO * 1_DONNEES_LIVRAISON_2021-04-00084 * BDT_3-3_SHP_LAMB93_D006-ED2023-06-15 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp to: * BDTOPO: * 1_DONNEES_LIVRAISON_2021-04-00084 * OCCUPATION_DU_SOL * ZONE_DE_VEGETATION.shp * TRANSPORT * TRONCON_DE_ROUTE.shp * HYDROGRAPHIE * SURFACE_HYDROGRAPHIQUE.shp Parameters: base_folder: base folder of the application (same one as the one written in the config file) departement: number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file: archive of the database (or the first file of the split archive) \"\"\" current_base_folder = os . path . join ( base_folder , departements , str ( departement ), bdtopo_folder ) archive_name = os . path . basename ( archive_file ) . split ( \".\" )[ 0 ] out_file_option = \"-o\" + current_base_folder command_line = get_installed_7z () + \" x \" + archive_file + \" \" + out_file_option subprocess . run ([ command_line ], shell = True ) # BDTOPO_3-3_TOUSTHEMES_SHP_LAMB93_D006_2023-06-15 path1 = os . path . join ( current_base_folder , archive_name ) # BDTOPO dir1 = os . listdir ( path1 )[ 0 ] path2 = os . path . join ( path1 , dir1 ) # 1_DONNEES_LIVRAISON_2021-04-00084 # os.listdir return order is not sorted. better match by substring dir2 = next ( x for x in os . listdir ( path2 ) if delivery in x ) path3 = os . path . join ( path2 , dir2 ) # BDT_3-3_SHP_LAMB93_D006-ED2023-06-15 # Other file in the directory has the same name but it's the hashfile dir3 = next ( x for x in os . listdir ( path3 ) if hash_file_extenstion not in x ) path4 = os . path . join ( path3 , dir3 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), bdtopo_folder ), exist_ok = True , ) os . rename ( path4 , os . path . join ( base_folder , departements , str ( departement ), bdtopo_folder , delivery ), )","title":"setup_bdtopo"},{"location":"datafiles/#mage_procgen.Utils.DataFiles.setup_rgealti","text":"Extracts RGEALTI archive, and changes the folders to simplify it from: * RGEALTI * RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D077_2021-03-03 * RGEALTI * 1_DONNEES_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * *.asc * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * dalles.shp to: * RGEALTI * 1_DONNEES_LIVRAISON * MNT * *.asc * 3_SUPPLEMENTS_LIVRAISON * MNT * dalles.shp Parameters: base_folder ( str ) \u2013 base folder of the application (same one as the one written in the config file) departement ( str ) \u2013 number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file ( str ) \u2013 archive of the database (or the first file of the split archive) Source code in mage_procgen/Utils/DataFiles.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 def setup_rgealti ( base_folder : str , departement : str , archive_file : str ): \"\"\" Extracts RGEALTI archive, and changes the folders to simplify it from: * RGEALTI * RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D077_2021-03-03 * RGEALTI * 1_DONNEES_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * *.asc * 2_METADONNEES_LIVRAISON_2021-04-00084 * 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 * RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 * dalles.shp to: * RGEALTI * 1_DONNEES_LIVRAISON * MNT * *.asc * 3_SUPPLEMENTS_LIVRAISON * MNT * dalles.shp Parameters: base_folder: base folder of the application (same one as the one written in the config file) departement: number of the departement as a 2 character string (ex: \"06\", \"77\" ...) archive_file: archive of the database (or the first file of the split archive) \"\"\" current_base_folder = os . path . join ( base_folder , departements , str ( departement ), terrain_DB ) archive_name = os . path . basename ( archive_file ) . split ( \".\" )[ 0 ] out_file_option = \"-o\" + current_base_folder command_line = get_installed_7z () + \" x \" + archive_file + \" \" + out_file_option subprocess . run ([ command_line ], shell = True ) # RGEALTI_2-0_1M_ASC_LAMB93-IGN69_D077_2021-03-03 path1 = os . path . join ( current_base_folder , archive_name ) # RGEALTI dir1 = os . listdir ( path1 )[ 0 ] path2 = os . path . join ( path1 , dir1 ) # 1_DONNEES_LIVRAISON_2021-04-00084 # os.listdir return order is not sorted. better match by substring dir2 = next ( x for x in os . listdir ( path2 ) if delivery in x ) path3 = os . path . join ( path2 , dir2 ) # RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 # Folder contains 3 subfolders, and the corresponding hashfiles. dirs3 = [ x for x in os . listdir ( path3 ) if hash_file_extenstion not in x ] dir3 = next ( x for x in dirs3 if terrain_data_folder in x ) path4 = os . path . join ( path3 , dir3 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), terrain_DB , delivery ), exist_ok = True , ) os . rename ( path4 , os . path . join ( base_folder , departements , str ( departement ), terrain_DB , delivery , terrain_data_folder , ), ) # 3_SUPPLEMENTS_LIVRAISON_2021-04-00084 dir4 = next ( x for x in os . listdir ( path2 ) if additional in x ) path5 = os . path . join ( path2 , dir4 ) # RGEALTI_MNT_1M_ASC_LAMB93_IGN69_D077_20210303 dir5 = next ( x for x in os . listdir ( path5 ) if hash_file_extenstion not in x ) path6 = os . path . join ( path5 , dir5 ) os . makedirs ( os . path . join ( base_folder , departements , str ( departement ), terrain_DB , additional ), exist_ok = True , ) os . rename ( path6 , os . path . join ( base_folder , departements , str ( departement ), terrain_DB , additional , terrain_data_folder , ), )","title":"setup_rgealti"},{"location":"dev/","text":"MAGE Procgen Dev Documention This page is desgined to help you edit, customize and improve this software. It will describe the internal modules, their roles and interactions. Structure The project is divided into a few folders: Assets: Stores the blender assets for rendering. Config: Stores the default configuration files. Loader: Python module. Used to load all files that the software might need using Manager: Python module. High-level objects that handle a particular job. Parser: Python module. Low-level objects that parse files Processor: Python module. Objects that are used for processing and calculations Renderer: Python module. Objects that directly interact with Blender's API to display the objects. Utils: Python module. Dataclasses, utilities, constants ... main.py: the main python file Deprecated Elements [TODO] LOREM IPSUM DOLOR SIT AMET Lighting The scene is lit using a native Blender Add-on . Currently, the sun position is set to the current date, at 12PM, located at the center of the scene, but it could be customized. Likewise, the intensity of the light is fixed for now, but could be ajusted. Schemas Main FloodProcessor RenderManager Beautify BaseRenderer RoadRenderer BuildingRenderer FloodRenderer","title":"Developer documentation"},{"location":"dev/#mage-procgen-dev-documention","text":"This page is desgined to help you edit, customize and improve this software. It will describe the internal modules, their roles and interactions.","title":"MAGE Procgen Dev Documention"},{"location":"dev/#structure","text":"The project is divided into a few folders: Assets: Stores the blender assets for rendering. Config: Stores the default configuration files. Loader: Python module. Used to load all files that the software might need using Manager: Python module. High-level objects that handle a particular job. Parser: Python module. Low-level objects that parse files Processor: Python module. Objects that are used for processing and calculations Renderer: Python module. Objects that directly interact with Blender's API to display the objects. Utils: Python module. Dataclasses, utilities, constants ... main.py: the main python file","title":"Structure"},{"location":"dev/#deprecated-elements-todo","text":"LOREM IPSUM DOLOR SIT AMET","title":"Deprecated Elements [TODO]"},{"location":"dev/#lighting","text":"The scene is lit using a native Blender Add-on . Currently, the sun position is set to the current date, at 12PM, located at the center of the scene, but it could be customized. Likewise, the intensity of the light is fixed for now, but could be ajusted.","title":"Lighting"},{"location":"dev/#schemas","text":"","title":"Schemas"},{"location":"dev/#main","text":"","title":"Main"},{"location":"dev/#floodprocessor","text":"","title":"FloodProcessor"},{"location":"dev/#rendermanager","text":"","title":"RenderManager"},{"location":"dev/#beautify","text":"","title":"Beautify"},{"location":"dev/#baserenderer","text":"","title":"BaseRenderer"},{"location":"dev/#roadrenderer","text":"","title":"RoadRenderer"},{"location":"dev/#buildingrenderer","text":"","title":"BuildingRenderer"},{"location":"dev/#floodrenderer","text":"","title":"FloodRenderer"},{"location":"flood/","text":"Flood Generation To simulate the propagation a flood, we use a graph-based pathfinding algorithm based on a rasterized grid of the height map. We first extract the digital elevation model (DEM) and rasterize it at \\SI{1}{\\meter\\per\\pixel} resolution, producing a $w\\times h$ matrix $\\mathbf{H}$ of the height map. We then produce a weighted oriented graph where every node is a pixel from the height map, and we add one edge from every pixel towards each of its eight neighbours. The weight of an edge corresponds to the slope along the direction, \\ie the difference in elevation between the departing pixel and its neighbour. Formally, this define a cost map $C$ where: \\begin{equation} C[(i,j), (i',j')] = \\begin{cases} \\mathbf{H}[i+u, j+v] - \\mathbf{H}[i, j] & \\text{for~~} (u,v) \\in {(-1, -1), (-1, 0), (-1,+1), (0, +1), (0, -1), (+1, -1), (+1, 0), (+1, +1)}\\ +\\infty & \\text{otherwise} \\end{cases} \\end{equation} Note that the cost is positive when moving towards a higher point, and negative when moving downhill. We then offset the cost matrix $C$ to get a matrix where all costs are non-negatives $\\mathbf{C} = C + \\min(C)$. Pixels that are covered by a water mass that will act as the source of the flood are tagged as 1 in binary matrix $\\mathbf{S}$ of dimensions $w\\times h$. Finally, for each source $s$, we apply the Dijkstra to find the shortest path between $s$ and every point $(i,j)$ in the raster, \\ie every node in the graph. If the total length of the path $l_{i,j}$ from the source to $(i,j)$ is under a threshold $L$, $(i,j)$ is then tagged as being flooded by the source $s$. The height of the flood is obtained by: \\begin{equation} \\text{water height}[i,j] = \\underbrace{h \\cdot (L - l_{i,j})^2} {\\text{relative water height, between 0 and } h} + \\underbrace{\\mathbf{H}(s)} {\\text{source height}} \\end{equation} Note that in this equation, the final water height might be inferior to the terrain height $\\mathbf{H}[i,j]$. In that case, we consider that pixel $(i,j)$ is actually not flooded.","title":"Flooding algorithm"},{"location":"flood/#flood-generation","text":"To simulate the propagation a flood, we use a graph-based pathfinding algorithm based on a rasterized grid of the height map. We first extract the digital elevation model (DEM) and rasterize it at \\SI{1}{\\meter\\per\\pixel} resolution, producing a $w\\times h$ matrix $\\mathbf{H}$ of the height map. We then produce a weighted oriented graph where every node is a pixel from the height map, and we add one edge from every pixel towards each of its eight neighbours. The weight of an edge corresponds to the slope along the direction, \\ie the difference in elevation between the departing pixel and its neighbour. Formally, this define a cost map $C$ where: \\begin{equation} C[(i,j), (i',j')] = \\begin{cases} \\mathbf{H}[i+u, j+v] - \\mathbf{H}[i, j] & \\text{for~~} (u,v) \\in {(-1, -1), (-1, 0), (-1,+1), (0, +1), (0, -1), (+1, -1), (+1, 0), (+1, +1)}\\ +\\infty & \\text{otherwise} \\end{cases} \\end{equation} Note that the cost is positive when moving towards a higher point, and negative when moving downhill. We then offset the cost matrix $C$ to get a matrix where all costs are non-negatives $\\mathbf{C} = C + \\min(C)$. Pixels that are covered by a water mass that will act as the source of the flood are tagged as 1 in binary matrix $\\mathbf{S}$ of dimensions $w\\times h$. Finally, for each source $s$, we apply the Dijkstra to find the shortest path between $s$ and every point $(i,j)$ in the raster, \\ie every node in the graph. If the total length of the path $l_{i,j}$ from the source to $(i,j)$ is under a threshold $L$, $(i,j)$ is then tagged as being flooded by the source $s$. The height of the flood is obtained by: \\begin{equation} \\text{water height}[i,j] = \\underbrace{h \\cdot (L - l_{i,j})^2} {\\text{relative water height, between 0 and } h} + \\underbrace{\\mathbf{H}(s)} {\\text{source height}} \\end{equation} Note that in this equation, the final water height might be inferior to the terrain height $\\mathbf{H}[i,j]$. In that case, we consider that pixel $(i,j)$ is actually not flooded.","title":"Flood Generation"},{"location":"install/","text":"Installation WorldWeaver is a Blender addon written in Python. It uses a few Python libraries and other softwares. Dependencies Current dependencies are as follows: Blender 3.5 and later Python 3.10 7zip geopandas 0.12 jsonpickle 3 rasterio 1.3 pyogrio 0.5 scipy 1.8 scikit-image 0.21.0 numpy 1.24 tqdm OPENEXR PIL IMath Sun Position (native Blender add-on) Setup instructions Start by cloning the repository from GitHub or extract the tarball: git clone https://github.com/geo-mage/worldweaver Then, you can install all dependencies using pip . While technically not required, it is recommended to use a virtual environment to do so: pip install -r requirements.txt You can then install the WorldWeaver Python module into your Python environment using: pip install . Registering the addon in Blender Because Blender uses its own Python interpreter, we have to specify that we now want Blender to use the system Python (or the Python from your virtualenv). This is achieved by passing the --python-use-system-env to Blender at startup: blender --python-use-system-env & Once Blender has started, we can register the WorldWeaver plugin as an add-on in the software. To do so: Open the Edit->Preferences->Add-ons menu. Click the Install button. Browse the file explorer to the folder where WorldWeaver has been downloaded and select the module_mage_procgen.py file. This registers WorldWeaver as a Blender add-on. In particular, this makes it possible to run the procedural generation using a simple keyboard shortcut. Using WorldWeaver Once WorldWeaver is installed, check out the standard workflow for more details on how to use the plugin.","title":"Installation"},{"location":"install/#installation","text":"WorldWeaver is a Blender addon written in Python. It uses a few Python libraries and other softwares.","title":"Installation"},{"location":"install/#dependencies","text":"Current dependencies are as follows: Blender 3.5 and later Python 3.10 7zip geopandas 0.12 jsonpickle 3 rasterio 1.3 pyogrio 0.5 scipy 1.8 scikit-image 0.21.0 numpy 1.24 tqdm OPENEXR PIL IMath Sun Position (native Blender add-on)","title":"Dependencies"},{"location":"install/#setup-instructions","text":"Start by cloning the repository from GitHub or extract the tarball: git clone https://github.com/geo-mage/worldweaver Then, you can install all dependencies using pip . While technically not required, it is recommended to use a virtual environment to do so: pip install -r requirements.txt You can then install the WorldWeaver Python module into your Python environment using: pip install .","title":"Setup instructions"},{"location":"install/#registering-the-addon-in-blender","text":"Because Blender uses its own Python interpreter, we have to specify that we now want Blender to use the system Python (or the Python from your virtualenv). This is achieved by passing the --python-use-system-env to Blender at startup: blender --python-use-system-env & Once Blender has started, we can register the WorldWeaver plugin as an add-on in the software. To do so: Open the Edit->Preferences->Add-ons menu. Click the Install button. Browse the file explorer to the folder where WorldWeaver has been downloaded and select the module_mage_procgen.py file. This registers WorldWeaver as a Blender add-on. In particular, this makes it possible to run the procedural generation using a simple keyboard shortcut.","title":"Registering the addon in Blender"},{"location":"install/#using-worldweaver","text":"Once WorldWeaver is installed, check out the standard workflow for more details on how to use the plugin.","title":"Using WorldWeaver"},{"location":"workflow/","text":"Standard Workflow Preparation First, you need to get the data needed for the application. For this version, only data from IGN https://www.geoportail.gouv.fr/ is supported, though with adaptations the software could be adapted for different data providers. IGN provides data for each Departement. For each zone you want to render, you need to download: BD TOPO (terrain and infrastructure definition) https://geoservices.ign.fr/bdtopo RGE Alti (altitude raster) https://geoservices.ign.fr/rgealti . Currently the application only works with the 1m resolution dataset and not the 5m one. BD ORTHO (orthorectified aerial view) https://geoservices.ign.fr/bdortho About the data Since the data is grouped by departements, the databases can be voluminous to download (RGE Alti is usually a couple of GB and BD Ortho can easily reach 50GB), and IGN servers are quite slow, it might take quite a while to get all the data for a departement Once you have those 3 datasets for each departement covered by the zone you want to render, you need to extract them so the software can read them. Command line helpers are available for that purpose in Datafiles Configuration Before you can render, you need to generate the configuration file for your run. To help in that, there are command line helpers available in Configuration Files Edition . The software is provided with a base file from which you can tweak however you like. Run Once the configuration file is done, open Blender, preferably through a terminal (easier to get the logs this way). To do so, when you are inside the folder where blender is installed: ./blender --python-use-system-env & You can then set the configuration file used by the plugin, either by going to Edit->Preferences->Add-ons , search for MAGE Procgen, and edit the Configuration File Path field. Alternatively, you can also do it by pressing Ctrl + Shift + L or go to Object->Mage Procgen Config Select . Once the configuration file is set (you don't have to do it if the name of the file has not changed since the last run), you can run the plugin by either pressing Ctrl + Shift + M or go to Object->Mage Procgen . While the program is running, you will not be able to see or do anything inside Blender, but you can follow the progression through the logs in the terminal you used to start Blender Once the run is finished, you will be able to see the scene, and if you have enabled it in the configuration file, you will have a folder containing: A copy of the configuration file you used, for tracking purposes The rendered images, each paired with another image with is a greyscale semantic map of the image.","title":"Usage"},{"location":"workflow/#standard-workflow","text":"","title":"Standard Workflow"},{"location":"workflow/#preparation","text":"First, you need to get the data needed for the application. For this version, only data from IGN https://www.geoportail.gouv.fr/ is supported, though with adaptations the software could be adapted for different data providers. IGN provides data for each Departement. For each zone you want to render, you need to download: BD TOPO (terrain and infrastructure definition) https://geoservices.ign.fr/bdtopo RGE Alti (altitude raster) https://geoservices.ign.fr/rgealti . Currently the application only works with the 1m resolution dataset and not the 5m one. BD ORTHO (orthorectified aerial view) https://geoservices.ign.fr/bdortho About the data Since the data is grouped by departements, the databases can be voluminous to download (RGE Alti is usually a couple of GB and BD Ortho can easily reach 50GB), and IGN servers are quite slow, it might take quite a while to get all the data for a departement Once you have those 3 datasets for each departement covered by the zone you want to render, you need to extract them so the software can read them. Command line helpers are available for that purpose in Datafiles","title":"Preparation"},{"location":"workflow/#configuration","text":"Before you can render, you need to generate the configuration file for your run. To help in that, there are command line helpers available in Configuration Files Edition . The software is provided with a base file from which you can tweak however you like.","title":"Configuration"},{"location":"workflow/#run","text":"Once the configuration file is done, open Blender, preferably through a terminal (easier to get the logs this way). To do so, when you are inside the folder where blender is installed: ./blender --python-use-system-env & You can then set the configuration file used by the plugin, either by going to Edit->Preferences->Add-ons , search for MAGE Procgen, and edit the Configuration File Path field. Alternatively, you can also do it by pressing Ctrl + Shift + L or go to Object->Mage Procgen Config Select . Once the configuration file is set (you don't have to do it if the name of the file has not changed since the last run), you can run the plugin by either pressing Ctrl + Shift + M or go to Object->Mage Procgen . While the program is running, you will not be able to see or do anything inside Blender, but you can follow the progression through the logs in the terminal you used to start Blender Once the run is finished, you will be able to see the scene, and if you have enabled it in the configuration file, you will have a folder containing: A copy of the configuration file you used, for tracking purposes The rendered images, each paired with another image with is a greyscale semantic map of the image.","title":"Run"}]}